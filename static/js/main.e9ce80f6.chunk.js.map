{"version":3,"sources":["Components/TodoItem.js","Components/TodoHeader.js","Actions/actions.js","Components/TodoFooter.js","Components/TodoList.js","Components/App.js","Reducers/reducer.js","index.js"],"names":["TodoItem","_this$props","this","props","title","completed","handleToggleCompletedTodo","handleDestroyOne","react_default","a","createElement","className","type","defaultChecked","onClick","Component","TodoHeader","state","handleChange","event","_this","setState","target","value","handleAddTodo","addTodo","keyCode","placeholder","autoFocus","onChange","onKeyDown","connect","dispatch","payload","TodoFooter","clearCompletedTodos","filter","Link","to","todos","todoList","TodoList","Fragment","Components_TodoHeader","map","todo","Components_TodoItem","key","id","Components_TodoFooter","handleDestroyAllCompletedTodos","location","pathname","App","clickedTodoId","toggleTodo","deleteTodo","allHandlingProps","length","Switch","Route","exact","path","render","Components_TodoList","Object","assign","initialState","todosReducer","arguments","undefined","action","newlyEnteredTodo","userId","Math","floor","random","objectSpread","toConsumableArray","concat","newTodosMinusCompleted","console","log","newTodosMinusOne","newTodosWithToggles","store","createStore","ReactDOM","BrowserRouter","basename","process","es","Components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e9ce80f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, deleteTodo, toggleTodo } from \"../Actions/actions\"\n\n// pascal case helps with distinguishing from html\n// no state b/c no way to change components with state,; this is just displaying and showing render method\nclass TodoItem extends Component {\n    render() {\n        const { title, completed, handleToggleCompletedTodo, handleDestroyOne } = this.props;\n        return (\n            // it will be completed\n            // <li className={completed && \"completed\"}> // this will make an error\n            // still want something to return even if empty\n            <li className={completed ? \"completed\" : \"\"}>\n                <div className=\"view\">\n                    {/* pass handlers down to children to w/e comp has html tag */}\n                    <input className=\"toggle\" type=\"checkbox\" defaultChecked={completed} onClick={handleToggleCompletedTodo} />\n                    {/* change checked to defaultChecked b/c that's not a react thingy */}\n                    <label>{title}</label>\n                    <button className=\"destroy\" onClick={handleDestroyOne}></button>\n                </div>\n            </li>\n        );\n    };\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from \"../Actions/actions\"\n\nclass TodoHeader extends Component {\n    state = {\n        title: \"\"\n    };\n\n    handleChange = event => {\n        this.setState({\n            title: event.target.value\n        })\n    };\n\n    // without this, it's not a controlled input; not modifying what is being displayed, unless you want it to do something like special char or all caps as person types \n    \n    // need to ahndle something with dom, so keep this\n    // because \"editting\" or w/e cause of state, not \"reading\", inside the heder, have null for mSTP; info getting dispatched is w/e you enter \n    handleAddTodo = event => {\n        const { addTodo } = this.props;\n        const { title } = this.state;\n        if (event.keyCode === 13) { // 13 is the code for enter; could also do event.key == \"Enter\"\n            addTodo(title);\n            event.target.value = \"\";\n            // or this.setState({ title: \"\" });\n        };\n    };\n\n    render() {\n        const { title } = this.state;\n        return (\n            <header className=\"header\">\n                <h1>todos</h1>\n                <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onChange={this.handleChange} onKeyDown={this.handleAddTodo} value={title} />\n                {/* the autoFocus auto sleects that input, so it makes it faster for the user; cAn do for loginbox */}\n            </header>\n        );\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: title => dispatch(addTodo(title))\n    }\n};\nexport default connect(null, mapDispatchToProps)(TodoHeader);","// action type constants = dont have to mistype string (vs code doesnt know if it is)\n// the exports are named (when expoted, can only import if spelled the same)\nexport const ADD_TODO = \"ADD_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\n\n// action creators; make action objs (always have type prop, which si what reducerswitch is on); fetch reqs will end up going inside (would go before the second{}); defines what will happen\nexport const addTodo = (title) => {\n    return {\n        type: ADD_TODO,\n        payload: title\n    }\n};\n\nexport const clearCompletedTodos = () => {\n    return {\n        type: CLEAR_COMPLETED_TODOS,\n    }\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: DELETE_TODO,\n        payload: id\n    }\n};\n\nexport const toggleTodo = (id) => {\n    return {\n        type: TOGGLE_TODO,\n        // what makes actioncreater happen; reducer (in other file) will transform data\n        payload: id\n    }\n};","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { clearCompletedTodos } from \"../Actions/actions\" \n\nclass TodoFooter extends Component {\n    render() {\n        // console.log(this.props.filter)\n        // if dont do this, change this to match the stuff with todos and this.state\n        const { completed, clearCompletedTodos, filter } = this.props;\n        return (\n            <footer className=\"footer\">\n                {/* should be 0 default; change to {completed} */}\n                <span className=\"todo-count\"><strong>{completed}</strong> item(s) left</span>\n                <ul className=\"filters\">\n                    {/* if do NavLink, add in activeClassName=\"selected\" and add exact to each, or if have the switch, just put with / in route; or classname={filter === \"all\"?\"seected\":\"\"} */}\n                    <li><Link to=\"/\" className={filter === \"/\" ? \"selected\" : \"\"}>All</Link></li>\n                    <li><Link to=\"/active\" className={filter === \"/active\" ? \"selected\" : \"\"}>Active</Link></li>\n                    <li><Link to=\"/completed\" className={filter === \"/completed\" ? \"selected\" : \"\"}>Completed</Link></li>\n                </ul>\n                <button className=\"clear-completed\" onClick={clearCompletedTodos}>Clear completed</button>\n            </footer>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        // there is a todos prop on state\n        todos: state.todoList\n    }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // call actionCreater() and dispatch it to the redux reducer; could alwayes just write as cCT() as long as named as same thing as prop in comp above and put in {} inside connect\n        clearCompletedTodos: () => dispatch(clearCompletedTodos())\n    }\n};\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(TodoFooter);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport TodoItem from \"./TodoItem.js\";\n// import todoList from '../todos.json';\nimport TodoHeader from './TodoHeader.js';\nimport TodoFooter from './TodoFooter.js';\n\nclass TodoList extends Component {\n    render() {\n        const { todos, handleAddTodo } = this.props;\n        return (\n            // react.fragment is used when there are multpile big tag things\n            <React.Fragment>\n                <TodoHeader handleAddTodo={handleAddTodo} />\n                <section className=\"main\">\n                    <ul className=\"todo-list\">\n                        {/* when put in comp state; when inside the map function, it will be a single todo */}\n                        {todos.map(todo => <TodoItem key={todo.id} title={todo.title} completed={todo.completed} handleToggleCompletedTodo={this.props.handleToggleCompletedTodo(todo.id)} handleDestroyOne={this.props.handleDestroyOne(todo.id)} />)}\n                        {/* call the hTCT and pass in the todoid and store inside clickedTodoId var, which causes cTI to be in scope for event function  --> completeTodo can also just be hTCT; it rerenders only 1 when props change */}\n                    </ul>\n                </section>\n                {/* can't rerender without passing down props, so w/o the filter, it wouldnt work in the footer */}\n                <TodoFooter completed={this.props.completed} handleDestroyAllCompletedTodos={this.props.handleDestroyAllCompletedTodos} filter={this.props.location.pathname} />\n            </React.Fragment>\n        );\n    };\n};\n\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from \"./TodoList.js\";\nimport { Switch, Route } from \"react-router-dom\";\nimport todoList from '../todos.json';\nimport { connect } from 'react-redux';\nimport { deleteTodo, toggleTodo } from \"../Actions/actions\"\n\nclass App extends Component {\n  // wont need state b/c redux will have the state stuff \n\n  handleToggleCompletedTodo = clickedTodoId => event => {\n    this.props.toggleTodo(clickedTodoId)\n  };\n  // will lose these handlers b/c just data and not doing stuffon dom\n  handleDestroyOne = clickedTodoId => event => {\n    this.props.deleteTodo(clickedTodoId);\n  };\n\n  render() {\n    // console.log(this.props.pathname)\n    const { todos } = this.props;\n    const allHandlingProps = {\n      handleDestroyOne: this.handleDestroyOne,\n      handleToggleCompletedTodo: this.handleToggleCompletedTodo,\n      completed: todos.filter(todo => !todo.completed).length\n    };\n    return (\n      <section className=\"todoapp\">\n        <Switch>\n          <Route exact path=\"/active\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => !todo.completed)} />} />\n          <Route exact path=\"/completed\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos.filter(todo => todo.completed)} />} />\n          <Route exact path=\"/\" render={props => <TodoList {...props} {...allHandlingProps} todos={todos} />} />\n        </Switch>\n      </section>\n    );\n  };\n};\n\n// cut out all ofr the state stuff above b/c state will be handled by redux \n// this state is entire redux state\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todoList\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteTodo: id => dispatch(deleteTodo(id)),\n    toggleTodo: id => dispatch(toggleTodo(id))\n  }\n}\n\n// if export derfault, dont have to use the same name; this one isnt nameed at all\n// connect decides when to call these functions; helps relay stuff into react; dont have to pass down props to mult levels; can modify any state on one comp \nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { ADD_TODO, CLEAR_COMPLETED_TODOS, DELETE_TODO, TOGGLE_TODO } from \"../Actions/actions.js\";\nimport todoList from '../todos.json'; // this will get the collection of all the messages and can put in the inital state\n\nconst initialState = {\n    todoList\n};\n\nconst todosReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            let makeId = Math.floor(Math.random() * 333666999);\n            let newlyEnteredTodo = {\n                userId: 1,\n                id: makeId,\n                title: action.payload,\n                completed: false\n            };\n            // wont be an array because this has to deal with wha the initial sate already looks like \n            return {\n                ...state,\n                todoList: [...state.todoList, newlyEnteredTodo]\n            };\n        case CLEAR_COMPLETED_TODOS:\n            const newTodosMinusCompleted = state.todoList.filter(todo => !todo.completed)\n            console.log(\"test \")\n            return {\n                ...state,\n                todoList: newTodosMinusCompleted\n            };\n        case DELETE_TODO:\n            const newTodosMinusOne = state.todoList.filter(todo => {\n                if (todo.id === action.payload) {\n                    return false\n                }\n                return true;\n            });\n            return {\n                ...state,\n                todoList: newTodosMinusOne\n            };\n        case TOGGLE_TODO:\n            const newTodosWithToggles = state.todoList.map(todo => {\n                if (todo.id === action.payload) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            });\n            return {\n                ...state,\n                todoList: newTodosWithToggles\n            };\n        default:\n            return state;\n    }\n};\n\nexport default todosReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport './index.css';\nimport App from './Components/App';\nimport todosReducer from \"./Reducers/reducer.js\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nlet store = createStore(todosReducer);\n\nconst Index = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        {/* comp that procides access to connect for any subcomp to be able to access redux store */}\n        <Provider store={store}>\n            <Route render={(props) => \n                <App pathname={props.location.pathname} />\n            }>\n            </Route>\n        </Provider>\n    </BrowserRouter>\n);\n\nReactDOM.render(<Index />, document.getElementById('root'));\n// first param has to be component"],"sourceRoot":""}